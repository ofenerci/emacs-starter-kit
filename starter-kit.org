#+TITLE: Emacs Starter Kit
* Отключение переноса строк
#+begin_src emacs-lisp
(setq truncate-lines t)
#+end_src
* Определение загрузочных файлов и установки загрузочных путей
#+begin_src emacs-lisp  
(setq dotfiles-dir (file-name-directory
                     (or load-file-name (buffer-file-name))))
  
(add-to-list 'load-path dotfiles-dir)
(setq package-user-dir (concat dotfiles-dir "elpa"))
#+end_src

* Загружаем пакетный менеджер ELPA
#+begin_src emacs-lisp  
(require 'package)
(package-initialize)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
#+end_src

* Установка пакетов из ELPA по списку.
#+begin_src emacs-lisp  
(when (not package-archive-contents)
  (package-refresh-contents))

(defvar my-packages '(auctex 
		      reftex 
		      ess 
		      magit 
		      ido 
		      hideshow 
              projectile
		      auto-complete 
		      cmake-mode 
		      sr-speedbar 
		      yasnippet
              column-marker
              r-autoyas
              smart-tabs-mode
              professional-theme 
              alect-themes)
  "A list of packages to ensure are installed at launch.")

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))
#+end_src
  Мои настройки для ~org-mode~, ~auctex~, а также файл для настройки
  кастомизации хранятся в каталоге =svl/= ветки =svl=

* Определение файлов настроек, специфичных для пользователя и машины.
#+begin_src emacs-lisp  
(setq system-specific-config (concat dotfiles-dir system-name ".el")
          system-specific-literate-config (concat dotfiles-dir system-name ".org")
          user-specific-config (concat dotfiles-dir user-login-name ".el")
          user-specific-literate-config (concat dotfiles-dir user-login-name ".org")
          user-specific-dir (concat dotfiles-dir user-login-name))
    (add-to-list 'load-path user-specific-dir)
#+end_src
* Пакеты emacs-lisp, загруженные из директории =src= замещают те, что установлены через ELPA. 
  Это полезно если вы используете самые свежие версии пакетов или если их нет в ELPA.
#+begin_src emacs-lisp  
(add-to-list 'load-path sitelisp-dir)
#+end_src

* Чрезвычайно полезная функция — используйте её если вам нужно отредактировать системные файлы от имени суперпользователя.
#+begin_src emacs-lisp  
(defun sudo-edit (&optional arg)
  (interactive "p")
  (if arg
      (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
     (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+end_src

* Этот код загружает цветовые темы, тем самым делая их доступными по-умолчанию.
#+begin_src emacs-lisp  
(add-to-list 'load-path (expand-file-name "color-theme" sitelisp-dir))
(require 'color-theme)
(eval-after-load "color-theme"
 '(progn (color-theme-initialize)))
#+end_src
* Прикручиваем типографику к Emacs
#+begin_src emacs-lisp  
(require 'typopunct)
(setq-default typopunct-buffer-language 'russian)
;; Функция включает typopunct-mode.
(defun turn-on-typopunct-mode ()
  (typopunct-mode t))
#+end_src

* Браузер
#+begin_src emacs-lisp  
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
#+end_src
  
* Включить подсветку синтаксиса для старых эмаксов.
#+begin_src emacs-lisp  
(global-font-lock-mode t)
#+end_src

* Подсвечитвать совпадающие скобки
#+begin_src emacs-lisp  
;(setq show-paren-style 'expression)
(show-paren-mode 1)
#+end_src

* Подсвечивать текущую строку
#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src

* Подключаем ESS
#+begin_src emacs-lisp  
(require 'ess-site)
(require 'r-autoyas)
(add-hook 'ess-mode-hook 'r-autoyas-ess-activate)
#+end_src

* Печать кириллицы в ~postscript~
#+begin_src emacs-lisp  
(load-library "ps-mule") 
(setq bdf-directory-list '("/usr/share/emacs/fonts/bdf")) 
(setq ps-mule-font-info-database-default ps-mule-font-info-database-bdf) 
(setq ps-multibyte-buffer 'bdf-font-except-latin)
#+end_src

* Загрузка настроек конкретного пользователя и машины
#+begin_src emacs-lisp  
(if (file-exists-p sitelisp-dir)
  (let ((default-directory sitelisp-dir))
    (normal-top-level-add-subdirs-to-load-path)))
 (if (file-exists-p user-specific-config) (load user-specific-config))
(if (file-exists-p user-specific-literate-config)
    (org-babel-load-file user-specific-literate-config))
(when (file-exists-p user-specific-dir)
  (let ((default-directory user-specific-dir))
    (mapc #'load (directory-files user-specific-dir nil ".*el$"))
     (mapc #'org-babel-load-file (directory-files user-specific-dir nil ".*org$"))))
 (if (file-exists-p system-specific-config) (load system-specific-config))
 (if (file-exists-p system-specific-literate-config)
     (org-babel-load-file system-specific-literate-config))
#+end_src

* Загрузка пакета =magit= при первом вызове команды ~magit-status~
#+begin_src emacs-lisp
(autoload 'magit-status "magit" nil t)
#+end_src

* Отключение панели инструментов
#+begin_src emacs-lisp
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
#+end_src

* Отключение меню
#+begin_src emacs-lisp
;;(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

* Размещаем окно emacs в левом верхнем углу
#+begin_src emacs-lisp
(setq initial-frame-alist '((top . 0) (left . 0) ))
#+end_src

* Функция, которая меняет размер окна (на всю левую половину экрана в зависимости от разрешения) 
#+begin_src emacs-lisp
(defun set-frame-size-according-to-resolution ()
(interactive)
(if window-system
(progn
(add-to-list 'default-frame-alist
(cons 'width (/ (/ (x-display-pixel-width) 2) (frame-char-width))))
(add-to-list 'default-frame-alist 
(cons 'height (/ (- (x-display-pixel-height) 0) (frame-char-height)))))))
#+end_src
  
* Вызываем функцию при загрузке
#+begin_src emacs-lisp
;; (set-frame-size-according-to-resolution)
#+end_src

* Устанавливаем режим =auto-fill=
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

* *Flyspell.* Код взят из [[http://www.emacswiki.org/emacs/FlySpell][EmacsWiki: Flyspell]]. Включаем ~flyspell~ в 
    режиме ~text-mode~ и отключаем его для режимов ~log-edit-mode~ и
    ~change-log-mode~
#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook))
     (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
     (add-hook hook (lambda () (flyspell-mode -1))))
#+end_src

Выбираем для проверки орфографии =aspell=
#+begin_src emacs-lisp
(setq ispell-program-name "aspell")
#+end_src

Если ~flyspell~ используется с программой ~aspell~ вместо ~ispell~
нужно добавить следующую команду:
#+begin_src emacs-lisp
(setq ispell-list-command "--list")
#+end_src
Из-за того, что опция =-l= означает =--lang= в ~aspell~, а в ~ispell~
=-l= означает =--list=, ~flyspell-buffer~ и ~flyspell-region~ страдают
от этой проблемы.

Меняем словари. Для переключения между английским и русским можно
использовать следующую функцию
#+begin_src emacs-lisp
(defun fd-switch-dictionary()
(interactive)
(let* ((dic ispell-current-dictionary)
   (change (if (string= dic "russian") "english" "russian")))
   (ispell-change-dictionary change)
   (message "Dictionary switched from %s to %s" dic change)
))
    
(global-set-key (kbd "<f8>")   'fd-switch-dictionary)
#+end_src

* Открываем doc файлы в режиме ~org-mode~ во внешних приложениях
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
  '(lambda ()
        (setq org-file-apps
              (append '(
                        ("\\.doc\\'" . default)
                       ) org-file-apps
              )
        )
   )
)
(add-hook 'org-mode-hook
  '(lambda ()
        (setq org-file-apps
              (append '(
                        ("\\.odt\\'" . default)
                       ) org-file-apps
              )
        )
   )
)
#+end_src

* Подключаем ~lambda-mode~
#+begin_src emacs-lisp
(require 'lambda-mode)
(add-hook 'org-mode-hook 'lambda-mode 1)
(add-hook 'emacs-lisp-mode-hook 'lambda-mode 1)
(setq lambda-symbol (string (make-char 'greek-iso8859-7 107)))
#+end_src
  
* Подключаем ~ido~
#+begin_src emacs-lisp
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matchingido-enable-flex-matching 1)
#+end_src

* Отключение полосы прокрутки
#+begin_src emacs-lisp
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+end_src

* Не создавать ~backup~, ~.saves~ и ~auto saving~ файлов
#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-list-file-name nil)
(setq auto-save-default nil)
#+end_src

* Включение режима ~bs~ для отображения буфера с открытыми файлами
    (плагин buffer show)
#+begin_src emacs-lisp
(require 'bs)
(setq bs-configurations
      '(("files" "^\\*scratch\\*" nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)))
(global-set-key (kbd "<f2>") 'bs-show)
#+end_src

* Включение и настройка =yasnippet=
#+begin_src emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+end_src

* Включение номеров строк
** Определение функции
#+begin_src emacs-lisp
(require 'linum)
(defun switch-linum-mode-hook ()
  (linum-mode t))
#+end_src
** Включение номеров строк в режимах программирования
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'switch-linum-mode-hook)
#+end_src
** Включение номеров строк в режимах программирования на C/C++
#+begin_src emacs-lisp
;;(add-hook 'c-mode-hook 'switch-linum-mode-hook)
;;(add-hook 'c++-mode-hook 'switch-linum-mode-hook)
#+end_src
** Включение номеров строк в режимах =cmake-mode=, =python-mode=, =makefile-mode=
#+begin_src emacs-lisp
(add-hook 'cmake-mode-hook 'switch-linum-mode-hook)
#+end_src
** Включение номеров строк в режимах =latex= и =ess=
   #+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'switch-linum-mode-hook)
(add-hook 'ess-mode-hook 'switch-linum-mode-hook)
   #+end_src
* Отмечаем правую границу
** Пакет =column-maker=
#+begin_src emacs-lisp
;(require 'column-marker)
;(add-hook 'prog-mode-hook (lambda () (interactive) (column-marker-1 80)))
#+end_src
** Пакет =fill-column-indicator=
#+begin_src emacs-lisp
(require 'fill-column-indicator)
(setq fci-rule-width 2)
(add-hook 'prog-mode-hook 'fci-mode)
#+end_src

* Настройка клавиатурных сочетаний для перемещения по буферу (похожие на ~ergoemacs~)
  #+begin_src emacs-lisp 
;;(setq ergoemacs-theme nil)
;;(setq ergoemacs-keyboard-layout "us")
;;(ergoemacs-mode 1)
(cua-mode 0)
(global-set-key (kbd "M-l") 'forward-char)
(global-set-key (kbd "M-C-l") 'forward-word)
(global-set-key (kbd "M-j") 'backward-char)
(global-set-key (kbd "M-C-j") 'backward-word)
(global-set-key (kbd "M-h") 'move-beginning-of-line)
(global-set-key (kbd "M-k") 'next-line)
(global-set-key (kbd "M-i") 'previous-line)
(global-set-key (kbd "M-e") 'backward-kill-word)
(global-set-key (kbd "M-r") 'kill-word)
(global-set-key (kbd "M-d") 'delete-backward-char)
(global-set-key (kbd "C-M-o") 'forward-paragraph)
(global-set-key (kbd "C-M-u") 'backward-paragraph)
(global-set-key (kbd "C-S-e") 'end-of-buffer)
(global-set-key (kbd "C-S-a") 'beginning-of-buffer)
  #+end_src
* Включение режима =smart-tabs-mode=
#+begin_src emacs-lisp
(smart-tabs-insinuate 'c 'c++ 'python)
(setq-default tab-width 4)
(add-hook 'prog-mode-hook
          (lambda () (setq indent-tabs-mode t)))
(add-hook 'c-mode-common-hook
          (lambda () (setq indent-tabs-mode t)))
(add-hook 'python-mode-hook
          (lambda () (setq indent-tabs-mode t)))
#+end_src

* Замена «yes или no» на «y or n»
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)

#+end_src


