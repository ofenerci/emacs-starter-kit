#+TITLE: Emacs Starter Kit

1. Определение загрузочных файлов и установки загрузочных путей
#+begin_src emacs-lisp  
(setq dotfiles-dir (file-name-directory
                     (or load-file-name (buffer-file-name))))
  
(add-to-list 'load-path dotfiles-dir)
(setq package-user-dir (concat dotfiles-dir "elpa"))
#+end_src

2. Загружаем пакетный менеджер ELPA
#+begin_src emacs-lisp  
(require 'package)
(package-initialize)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
#+end_src

3. Установка пакетов из ELPA по списку
#+begin_src emacs-lisp  
(when (not package-archive-contents)
  (package-refresh-contents))

(defvar my-packages '(auctex reftex ess magit)
  "A list of packages to ensure are installed at launch.")

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))
#+end_src

4. Определение файлов настроек, специфичных для пользователя и машины.
#+begin_src emacs-lisp  
(setq system-specific-config (concat dotfiles-dir system-name ".el")
          system-specific-literate-config (concat dotfiles-dir system-name ".org")
          user-specific-config (concat dotfiles-dir user-login-name ".el")
          user-specific-literate-config (concat dotfiles-dir user-login-name ".org")
          user-specific-dir (concat dotfiles-dir user-login-name))
    (add-to-list 'load-path user-specific-dir)
#+end_src

5. Пакеты emacs-lisp, загруженные из директории =src= замещают те, что установлены 
   через ELPA. Это полезно если вы используете самые свежие версии пакетов или если 
   их нет в ELPA.
#+begin_src emacs-lisp  
(add-to-list 'load-path sitelisp-dir)
#+end_src

6. Чрезвычайно полезная функция — используйте её если вам нужно отредактировать 
   системные файлы от имени суперпользователя.
#+begin_src emacs-lisp  
(defun sudo-edit (&optional arg)
  (interactive "p")
  (if arg
      (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
     (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+end_src

7. Этот код загружает цветовые темы, тем самым делая их доступными
   по-умолчанию.
#+begin_src emacs-lisp  
(add-to-list 'load-path (expand-file-name "color-theme" sitelisp-dir))
(require 'color-theme)
(eval-after-load "color-theme"
  '(progn (color-theme-initialize)))
#+end_src

8. Прикручиваем типографику к Emacs
#+begin_src emacs-lisp  
(require 'typopunct)
(setq-default typopunct-buffer-language 'russian)
;; Функция включает typopunct-mode.
(defun turn-on-typopunct-mode ()
  (typopunct-mode t))
#+end_src

9. Браузер
#+begin_src emacs-lisp  
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome")
#+end_src

10. Включить подсветку синтаксиса для старых эмаксов.
#+begin_src emacs-lisp  
(global-font-lock-mode t)
#+end_src

11. Подсвечитвать совпадающие скобки
#+begin_src emacs-lisp  
(show-paren-mode 1)
#+end_src

12. Подключаем ESS
#+begin_src emacs-lisp  
(require 'ess-site)
#+end_src

13. Печать кириллицы в postscript
#+begin_src emacs-lisp  
(load-library "ps-mule") 
(setq bdf-directory-list '("/usr/share/emacs/fonts/bdf")) 
(setq ps-mule-font-info-database-default ps-mule-font-info-database-bdf) 
(setq ps-multibyte-buffer 'bdf-font-except-latin)
#+end_src

14. Загрузка настроек конкретного пользователя и машины
#+begin_src emacs-lisp  
(if (file-exists-p sitelisp-dir)
  (let ((default-directory sitelisp-dir))
    (normal-top-level-add-subdirs-to-load-path)))
 (if (file-exists-p user-specific-config) (load user-specific-config))
(if (file-exists-p user-specific-literate-config)
    (org-babel-load-file user-specific-literate-config))
(when (file-exists-p user-specific-dir)
  (let ((default-directory user-specific-dir))
    (mapc #'load (directory-files user-specific-dir nil ".*el$"))
     (mapc #'org-babel-load-file (directory-files user-specific-dir nil ".*org$"))))
 (if (file-exists-p system-specific-config) (load system-specific-config))
 (if (file-exists-p system-specific-literate-config)
     (org-babel-load-file system-specific-literate-config))
#+end_src

15. Загрузка пакета =magit= при первом вызове команды ~magit-status~
#+begin_src emacs-lisp
(autoload 'magit-status "magit" nil t)
#+end_src

16. Отключение панели инструментов
#+begin_src emacs-lisp
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
#+end_src

17. Отключение меню
#+begin_src emacs-lisp
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

18. Размещаем окно emacs в левом верхнем углу
#+begin_src emacs-lisp
(setq initial-frame-alist '((top . 0) (left . 0) ))
#+end_src

19. Функция, которая меняет размер окна (на всю левую половину экрана
    в зависимости от разрешения) 
#+begin_src emacs-lisp
(defun set-frame-size-according-to-resolution ()
(interactive)
(if window-system
(progn
(add-to-list 'default-frame-alist
(cons 'width (/ (/ (x-display-pixel-width) 2) (frame-char-width))))
(add-to-list 'default-frame-alist 
(cons 'height (/ (- (x-display-pixel-height) 0) (frame-char-height)))))))
#+end_src

20. Вызываем функцию при загрузке
#+begin_src emacs-lisp
(set-frame-size-according-to-resolution)
#+end_src

21. Устанавливаем режим =auto-fill=
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

22. *Flyspell.* Код взят из [[http://www.emacswiki.org/emacs/FlySpell][EmacsWiki: Flyspell]]. Включаем ~flyspell~ в
    режиме ~text-mode~ и отключаем его для режимов ~log-edit-mode~ и
    ~change-log-mode~
#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook))
     (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
     (add-hook hook (lambda () (flyspell-mode -1))))
#+end_src

Выбираем для проверки орфографии =aspell=
#+begin_src emacs-lisp
(setq ispell-program-name "aspell")
#+end_src

Если ~flyspell~ используется с программой ~aspell~ вместо ~ispell~
нужно добавить следующую команду:
#+begin_src emacs-lisp
(setq ispell-list-command "--list")
#+end_src
Из-за того, что опция =-l= означает =--lang= в ~aspell~, а в ~ispell~
=-l= означает =--list=, ~flyspell-buffer~ и ~flyspell-region~ страдают
от этой проблемы. 

Меняем словари. Для переключения между английским и русским можно
использовать следующую функцию
#+begin_src emacs-lisp
(defun fd-switch-dictionary()
(interactive)
(let* ((dic ispell-current-dictionary)
   (change (if (string= dic "russian") "english" "russian")))
   (ispell-change-dictionary change)
   (message "Dictionary switched from %s to %s" dic change)
))
    
(global-set-key (kbd "<f8>")   'fd-switch-dictionary)
#+end_src
