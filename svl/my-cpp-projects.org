#+TITLE: My C++ projects by using EDE
* Настройка EDE
** Для использования проектов необходимо включить соответствующий режим, реализуемый пакетом ~EDE~
   #+begin_src emacs-lisp
(global-ede-mode 1)
(ede-enable-generic-projects)
   #+end_src
** Загрузка =ede-cmake=
#+begin_src emacs-lisp
(require 'ede-cmake)
#+end_src
** Настройка команды компиляции для qt проекта
   #+begin_src emacs-lisp
(setq compilation-scroll-output 1)
(global-set-key (kbd "\e\em") 'save-and-make)
(global-set-key (kbd "\e\eq") 'save-and-qmake)
(global-set-key (kbd "\e\ec") 'save-and-cmake)
(global-set-key (kbd "\e\ek") 'kill-compilation)
(defun save-and-qmake ()
  "save and call compile as in ../build directory"
  (interactive)
  (save-buffer)
  (compile "cd ../build && qmake ../src")
  (message "qmake executed!"))
;;(defun save-and-cmake ()
;;  "save and call compile as cmake-gui in ../build directory"
;;  (interactive)
;;  (save-buffer)
;;  (compile "cd ../build && cmake-gui ../src"))
;;(defun save-and-make ()
;;  "save and call compile as make"
;;  (interactive)
;;  (save-buffer)
;;  (compile "cd ../build && make")
;;  (message "make executed!"))
   #+end_src
** Настройка компиляции теневой сборки
   #+begin_src emacs-lisp
(defun svl/compile ()
  "Saves all unsaved buffers, and runs 'compile'."
  (interactive)
  (save-some-buffers t)
  (let* ((fname (or (buffer-file-name (current-buffer)) default-directory))
         (current-dir (file-name-directory fname))
         (prj (ede-current-project current-dir)))
    (if prj
        (project-compile-project prj)
        (compile compile-command))))
(global-set-key [f9] 'svl/compile)
   #+end_src
* Проекты Qt
** Проект ~tooth~
#+begin_src emacs-lisp
(when (file-exists-p "~/Projects/tooth/src/all.pro")
 (setq mathdent-project
        (ede-cpp-root-project "tooth"
                              :name "tooth"
                              :file "~/Projects/tooth/src/all.pro"
                              :compile-command "cd ../build && qmake ../src/all.pro && make"
                              )))
#+end_src

* Проекты CMake
** Проект ~itksnap~
  #+begin_src emacs-lisp
(when (file-exists-p "~/Projects/itk-snap/src/CMakeLists.txt")
 (setq itksnap-project
        (ede-cpp-root-project "itksnap"
                              :name "itksnap"
                              :file "~/Projects/itk-snap/src/CMakeLists.txt"
                              :system-include-path '("/usr/local/include/ITK-4.5")
			      :include-path '("/Common"
					      "/Common/ITKExtras"
					      "/GUI/Model"
					      "/GUI/Qt/Components"
					      "/GUI/Qt/Coupling"
					      "/GUI/Qt/External/ColorWheel"
					      "/GUI/Qt/ModelView"
					      "/GUI/Qt/View"
					      "/GUI/Qt/Windows"
					      "/GUI/Qt/Windows/MeshExportWizard"
					      "/GUI/Qt/Renderer"
					      "/GUI/Qt/Renderer/OrientationWidget/Reorient"
					      "/Logic/Common"
					      "/Logic/FrameWork"
					      "/Logic/ImageWrapper"
					      "/Logic/LevelSet"
					      "/Logic/Mesh"
					      "/Logic/Preprocessing"
					      "/Logic/Preprocessing/GMM"
					      "/Logic/RandomForest"
					      "/Logic/Slicing")
                              :compile-command "cd ../build && make"
                              )))
  #+end_src
** Проект ~mathdent~
#+begin_src emacs-lisp
(defvar my-project-root-build-directories
   '(("None" . "build")
     ("Debug" . "build.dbg")
     ("Release" . "build.rls"))
;;   "Alist of build directories in the project root"
)

(defun my-project-root-build-locator (config root-dir)
;;   "Locates a build directory in the project root, uses
;; project-root-build-directories to look up the name."
   (cdr (assoc config my-project-root-build-directories)))

(defun my-load-project (dir)
;;   "Load a project of type `ede-cmake-cpp-project' for the directory DIR.
;;      Return nil if there isn't one."
   (ede-cmake-cpp-project 
    (file-name-nondirectory (directory-file-name dir))
    :directory dir
    :locate-build-directory 'my-project-root-build-locator
    :build-tool (cmake-make-build-tool "Make" :additional-parameters "-j4 -kr")
    :include-path '( "/" )
    :system-include-path (list (expand-file-name "external" dir) )
    ))

 (ede-add-project-autoload
  (ede-project-autoload "mathdent"
                        :file 'ede-cmake
                        :proj-file "CMakeLists.txt"
                        :proj-root 'ede-cmake-cpp-project-root
                        :proj-root-dirmatch ""
                        :load-type 'my-load-project
                        :class-sym 'ede-cmake-cpp-project)
  'unique)
#+end_src
   
